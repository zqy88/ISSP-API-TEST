{"name": "运营侧拒绝联盟申请", "status": "failed", "statusDetails": {"message": "AssertionError: assert None == '操作成功'", "trace": "@allure.epic(\"运营平台\")\n    @allure.feature(\"用户申请\")\n    @allure.title (\"运营侧拒绝联盟申请\")\n    def test_11():\n        requests.packages.urllib3.disable_warnings()\n        #1.用户发起联盟申请\n        data={\n    \t\"company\": \"12213\",\n    \t\"taxId\": \"213123213\",\n    \t\"industry\": \"农、林、牧、渔业/农业\",\n    \t\"city\": \"\",\n    \t\"mobile\": \"17454545454\",\n    \t\"name\": \"taskId@w.com\",\n    \t\"email\": \"taskId@w.com\",\n    \t\"comment\": \"taskId@w.com\",\n    \t\"customerId\": \"468493464002797568\",\n    \t\"customerName\": \"nsj3trywir51e7r\"\n    }\n        res1 = requests.post(URL + \"customer-center/alliance/apply\",\n                                     data=json.dumps(data), verify=False, headers=headers_enterprise)\n        with allure.step(\"结果检查\"):\n            with allure.step(f\"1.字段msg检查，预期结果为'success'\"):\n                result=jsonpath.jsonpath(json.loads(res1.text),\"$..msg\")[0]\n                with allure.step(f\"实际结果为：\\\"{result}\\\"\"):\n                    assert result == \"success.\"\n        #查看刚刚的请求\n        res1 = requests.get(URLY + \"api/issp/apply/alliance/apply/todo?r=167896624102&downloadType=0&current=1&size=15\",\n                    verify=False, headers=headers_admin)\n        PrecordId_id = jsonpath.jsonpath(json.loads(res1.text), \"$..data..records..recordId\")[0]\n        taskId_id = jsonpath.jsonpath(json.loads(res1.text), \"$..data..records..taskId\")[0]\n        #2.运营测接受申请\n        data={\n     \"taskFlag\": 1,\n     \"comment\": \"port_yz确认接收\",\n     \"taskId\": taskId_id,\n     \"recordId\": PrecordId_id,\n     \"userName\": \"port_yz\"\n    }\n        res1 = requests.post(URLY + \"api/issp/apply/alliance/apply/submit?r=\"+\"{}\".format(int(round(time.time()*1000))),\n                                     data=json.dumps(data), verify=False, headers=headers_admin)\n        with allure.step(\"结果检查\"):\n            with allure.step(f\"1.字段data检查，预期结果为'操作成功'\"):\n                result = jsonpath.jsonpath(json.loads(res1.text), \"$..data\")[0]\n                with allure.step(f\"实际结果为：\\\"{result}\\\"\"):\n>                   assert result == \"操作成功\"\nE                   AssertionError: assert None == '操作成功'\n\ntest_运营侧.py:515: AssertionError"}, "steps": [{"name": "结果检查", "status": "passed", "steps": [{"name": "1.字段msg检查，预期结果为'success'", "status": "passed", "steps": [{"name": "实际结果为：\"success.\"", "status": "passed", "start": 1694074806322, "stop": 1694074806322}], "start": 1694074806322, "stop": 1694074806322}], "start": 1694074806321, "stop": 1694074806322}, {"name": "结果检查", "status": "failed", "statusDetails": {"message": "AssertionError: assert None == '操作成功'\n", "trace": "  File \"E:\\pythonWorkSpace\\api_test_1\\issp\\test_运营侧.py\", line 515, in test_11\n    assert result == \"操作成功\"\n"}, "steps": [{"name": "1.字段data检查，预期结果为'操作成功'", "status": "failed", "statusDetails": {"message": "AssertionError: assert None == '操作成功'\n", "trace": "  File \"E:\\pythonWorkSpace\\api_test_1\\issp\\test_运营侧.py\", line 515, in test_11\n    assert result == \"操作成功\"\n"}, "steps": [{"name": "实际结果为：\"None\"", "status": "failed", "statusDetails": {"message": "AssertionError: assert None == '操作成功'\n", "trace": "  File \"E:\\pythonWorkSpace\\api_test_1\\issp\\test_运营侧.py\", line 515, in test_11\n    assert result == \"操作成功\"\n"}, "start": 1694074806517, "stop": 1694074806518}], "start": 1694074806517, "stop": 1694074806518}], "start": 1694074806517, "stop": 1694074806519}], "start": 1694074806162, "stop": 1694074806520, "uuid": "b2f1c607-11a3-41ac-bdec-49c4bf5f7e39", "historyId": "daed612fcab636eaee9fd199bbd95069", "testCaseId": "daed612fcab636eaee9fd199bbd95069", "fullName": "test_运营侧#test_11", "labels": [{"name": "epic", "value": "运营平台"}, {"name": "feature", "value": "用户申请"}, {"name": "suite", "value": "test_运营侧"}, {"name": "host", "value": "DESKTOP-ORH7286"}, {"name": "thread", "value": "44332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_运营侧"}]}